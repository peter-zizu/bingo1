pipeline {
    agent any

    tools {
        jdk 'jdk-17'
        nodejs 'Node16'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/peter-zizu/bingo1.git'
            }
        }

        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=Bingo \
                        -Dsonar.projectKey=Bingo
                    '''
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }

        stage('OWASP FS Scan') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Trivy FS Scan') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }

        stage("Docker Build & Push") {
            steps {
                script {
                    def version = "${env.BUILD_NUMBER ?: '1.0.0'}"
                    def imageName = "chibuezeking/bingo:${version}"
                    
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {   
                        sh """
                            docker build -t bingo .
                            docker tag bingo ${imageName}
                            docker push ${imageName}
                            docker tag bingo chibuezeking/bingo:latest
                            docker push chibuezeking/bingo:latest
                        """
                    }
                }
            }
        }

        stage("Trivy Image Scan") {
            steps {
                script {
                    def version = "${env.BUILD_NUMBER ?: '1.0.0'}"
                    sh "trivy image chibuezeking/bingo:${version} > trivyimage.txt"
                }
            }
        }

        stage('Deploy to Container') {
            steps {
                script {
                    def version = "${env.BUILD_NUMBER ?: '1.0.0'}"
                    sh "docker run -d --name bingo -p 3000:3000 chibuezeking/bingo:${version}"
                }
            }
        }
    }

    post {
        always {
            script {
                def buildStatus = currentBuild.currentResult
                def buildUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')[0]?.userId ?: 'Github User'

                emailext (
                    subject: "Pipeline ${buildStatus}: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: """
                    <p>This is a Jenkins BINGO CICD pipeline status.</p>
                    <p>Project: ${env.JOB_NAME}</p>
                    <p>Build Number: ${env.BUILD_NUMBER}</p>
                    <p>Build Status: ${buildStatus}</p>
                    <p>Started by: ${buildUser}</p>
                    <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                    """,
                    to: 'mailavocadoe@gmail.com',
                    from: 'mailavocadoe@gmail.com',
                    replyTo: 'mailavocadoe@gmail.com',
                    mimeType: 'text/html',
                    attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
                )
            }
        }
    }
}

# How to Create an EKS Cluster Using AWS Console | Create Node Group | Configure Kubernetes Cluster

## Step 1: Set Up an EKS Management Host in AWS

### Prerequisites
Before creating an EKS cluster, ensure you have the following:

- **AWS Account** â€“ Sign up for an AWS account and configure an EC2 instance.
- **kubectl** â€“ Install kubectl for interacting with Kubernetes clusters.
- **AWS CLI** â€“ Install and configure the AWS CLI to interact with AWS services.
- **eksctl** â€“ Install eksctl, the command-line tool for creating and managing Amazon EKS clusters.

### Step 1.1: Launch an Ubuntu EC2 Instance
1. Open the **AWS Management Console** â†’ Navigate to **EC2** â†’ Launch an Instance.
2. Choose **Ubuntu 20.04 LTS** (or the latest version).
3. Select **Instance Type**: `t2.micro` (for demo purposes).
4. Configure **Key Pair & Security Groups**.
5. Launch the instance and connect via **SSH**.

### Step 1.2: Install AWS CLI on the EC2 Instance
Run the following commands on your EC2 instance to install the AWS CLI:

```sh
sudo apt update
sudo apt install unzip -y
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
aws --version
```

## Step 2: Install kubectl and eksctl

### Step 2.1: Install kubectl
kubectl is the command-line tool for interacting with Kubernetes clusters. It allows you to:
âœ” Deploy applications  
âœ” Manage resources (pods, services, deployments, etc.)  
âœ” Monitor cluster health  
âœ” Scale workloads  
âœ” Debug issues  

Run the following commands to install kubectl:

```sh
curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
chmod +x kubectl
sudo mv kubectl /usr/local/bin
kubectl version --client
kubectl version --short --client
```

### Step 2.2: Install eksctl
`eksctl` is a CLI tool for managing Amazon EKS clusters. It simplifies cluster creation, scaling, and deletion.

Why use eksctl?
âœ” Easily create & manage EKS clusters  
âœ” Automates networking, IAM roles, and node groups  
âœ” Works seamlessly with AWS CLI  

Run the following commands to install eksctl:

```sh
curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv /tmp/eksctl /usr/local/bin
eksctl version
```

## Step 3: Create an IAM Role for EKS Management Host

### Step 3.1: Create a New IAM Role
1. Open **AWS Console** â†’ Navigate to **IAM** â†’ **Roles** â†’ **Create Role**.
2. Select **EC2** as the **Use Case**.
3. Attach the following permissions to the role:
   - `IAMFullAccess`
   - `VPCFullAccess`
   - `EC2FullAccess`
   - `CloudFormationFullAccess`
   - `AdministratorAccess`
4. Name the role **eks-management-role** and create it.

### Step 3.2: Attach IAM Role to EC2 Instance
1. Navigate to **EC2 Console**.
2. Select your **EKS Management Host** instance.
3. Click **Actions** â†’ **Security** â†’ **Modify IAM Role**.
4. Attach the `eks-management-role` to the instance.

## Step 4: Create an EKS Cluster Using eksctl
Use the following command to create an EKS cluster with two nodes:

**General Syntax:**
```sh
eksctl create cluster --name <cluster-name> \
  --region <region-name> \
  --node-type <instance-type> \
  --nodes-min 2 \
  --nodes-max 2 \
  --zones <AZ-1>,<AZ-2>
```
```
**Example: Creating a Cluster in N. Virginia Region**
```sh
eksctl create cluster --name chibz-devops-cluster1 \
  --region us-east-1 \
  --node-type t2.medium \
  --zones us-east-1a,us-east-1b
```

### Step 4.1: Verify Cluster Creation
Cluster creation takes **5 to 10 minutes**. Once completed, verify the cluster using:

```sh
kubectl get svc
```

**Expected Output:**
```sh
NAME             TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE
kubernetes       ClusterIP   10.100.0.1    <none>        443/TCP   1m
```

## Step 5: Verify Nodes
Check if the nodes are running:

```sh
kubectl get nodes
```

**Expected Output:**
```sh
NAME                            STATUS   ROLES    AGE     VERSION
ip-192-168-xx-xx.ec2.internal   Ready    <none>   5m      v1.17.12-eks-7684af
ip-192-168-xx-xx.ec2.internal   Ready    <none>   5m      v1.17.12-eks-7684af
```

## Step 6: Deploy an Application
1. Create a **manifest.yml** file.
2. Apply the manifest to deploy a sample application:

```sh
kubectl apply -f manifest.yml
```

3. Verify the deployed pods:

```sh
kubectl get pods
```

4. Describe a specific pod:

```sh
kubectl describe pod <pod-name>
```

5. View pod logs:

```sh
kubectl logs <pod-name>
```

## Step 7: Clean Up Resources
After completing your practice, delete the cluster and other resources to avoid AWS charges:

```sh
eksctl delete cluster --name  --region ap-south-1
```

## Conclusion
ðŸŽ‰ Congratulations! You have successfully created an EKS cluster with two nodes using `eksctl`. Now, you can deploy and manage applications in your Kubernetes cluster.

